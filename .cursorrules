
# Project

I want a fast performant app `Did You Get It` (Mac identifier it.didyouget.mac, homepage https://didyouget.it ) that will run on macOS with extremely minimal user interface, and will let me: 

- Record the configurable area on the selectable screen, as a 60 FPS full-resolution (Retina) video
- If requested, record the audio from a selectable audio device
- If requested, record the mouse movements and clicks in JSON format with click vs. hold-release detection
- If requested, record the keyboard strokes in JSON format with tap vs. hold-release detection
- Save the recorded video, audio, and mouse/keyboard strokes to a file. If requested, the audio should be mixed with the video.

## Structure

- `README.md` contains the overview of the project
- `SPEC.md` contains the detailed specification. Check it, make sure you understand it, and then start working.
- `PROGRESS.md` contains the plan and uses `[ ]` vs. `[x]` items to track the progress. Keep it updated as you work.
- `CHANGELOG.md` contains the changelog. Keep updated as you work
- `TODO.md` contains the highest-priority issues that you have to prioritize. Keep updated as you work.

## Operation

As you work: 

- Consult TODO.md for highest-priority issues and fix them. Update the file as you work.
- Consult PROGRESS.md for additional issues and fix them. Update the file as you work.
- Keep the CHANGELOG.md updated as you work.
- After you make a change, perform `./run.sh debug` on macOS to build and run the app in debug mode, and observer the console output for any issues.


START SPECIFICATION:
---
description: Document high-level business logic and core functionality for screen recording applications with input tracking capabilities
globs: *.swift,*.md
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


Screen Recording Core System ("Did You Get It")
Importance Score: 95

A macOS screen recording system with advanced input tracking capabilities focusing on:

Recording Core:
- Full resolution (Retina) screen capture at 60 FPS
- Configurable recording area selection
- Optional audio device integration
- Mouse/keyboard action tracking with detailed event discrimination

Primary Components:

1. Input Tracking Engine (Score: 90)
- Differentiated click vs. hold-release detection
- Keyboard stroke capture with tap/hold discrimination
- Structured JSON output format for replay analysis
- Timestamp correlation between input events

2. Recording Management (Score: 85)
- Screen area configuration and capture
- Audio device selection and synchronization
- Input tracking activation/deactivation
- Output file management for video/audio/input data

3. Device Integration (Score: 80)
- Audio device enumeration and selection
- Screen selection and boundary management
- Input device monitoring and event capture

Business-Critical Files:
```
DidYouGet/Models/InputTracking/KeyboardTracker.swift
DidYouGet/Models/InputTracking/MouseTracker.swift
DidYouGet/Utilities/AudioManager.swift
```

Key Business Workflows:
1. Screen Recording Pipeline
- Area selection
- Device initialization
- Capture stream management
- File output coordination

2. Input Tracking Pipeline
- Event discrimination
- State tracking
- JSON formatting
- Synchronized storage

3. Audio Integration Pipeline
- Device selection
- Stream synchronization
- Mixed output generation

$END$
END SPECIFICATION