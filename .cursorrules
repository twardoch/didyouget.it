

# Project

I want a fast performant app `Did You Get It` (Mac identifier it.didyouget.mac, homepage https://didyouget.it ) that will run on macOS with extremely minimal user interface, and will let me: 

- Record the configurable area on the selectable screen, as a 60 FPS full-resolution (Retina) video
- If requested, record the audio from a selectable audio device
- If requested, record the mouse movements and clicks in JSON format with click vs. hold-release detection
- If requested, record the keyboard strokes in JSON format with tap vs. hold-release detection
- Save the recorded video, audio, and mouse/keyboard strokes to a file. If requested, the audio should be mixed with the video.

## Structure

- `README.md` contains the overview of the project
- `SPEC.md` contains the detailed specification. Check it, make sure you understand it, and then start working.
- `PROGRESS.md` contains the plan and uses `[ ]` vs. `[x]` items to track the progress. Keep it updated as you work.
- `CHANGELOG.md` contains the changelog. Keep updated as you work




START SPECIFICATION:
---
description: Documentation for screen recording applications focusing on core capture logic, recording configuration, and input handling. Apply when documenting main recording functionality and user preference management.
globs: *.swift,Models/*.swift,Views/*.swift
alwaysApply: false
---


# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


The DidYouGet application implements screen recording functionality with configurable capture modes and preferences management.

Core Components:

1. Recording Management (Importance: 95)
- Supports full display, window, and custom area capture modes
- Real-time screen and audio capture with sync capabilities
- Track and manage recording states and duration
Location: DidYouGet/DidYouGet/Models/RecordingManager.swift

2. Recording Configuration (Importance: 85)
- Quality tier management (low/medium/high/lossless)
- Input tracking configuration for mouse and keyboard
- Audio source selection and management
- Output file naming conventions
Location: DidYouGet/DidYouGet/Models/PreferencesManager.swift

3. Input Control System (Importance: 80)
- Mouse movement and click simulation
- Keyboard shortcut handling
- Directional scrolling control
- Coordinate-based cursor positioning

The application architecture centers around screen capture workflows with customizable input tracking and quality settings. Recording configurations are persisted and managed through dedicated preference handlers, while the input control system enables precise capture control.

$END$
END SPECIFICATION